//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use async_trait::async_trait;
use chrono::Utc;

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use common::user::userable::Userable;
use std::fmt::Display;
use uuid::Uuid;

#[derive(Default, Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub created_at: chrono::DateTime<Utc>,
    pub updated_at: Option<chrono::DateTime<Utc>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let mut model = self.clone();
        if insert {
            model.created_at = sea_orm::ActiveValue::Set(Utc::now());
            model.updated_at = sea_orm::ActiveValue::Set(None);
        } else {
            model.created_at = sea_orm::ActiveValue::Unchanged(Utc::now());
            model.updated_at = sea_orm::ActiveValue::Set(Some(Utc::now()));
        }
        Ok(model)
    }
}

impl Userable for Model {
    fn get_id(&self) -> Box<dyn Display + Sync + Send> {
        Box::new(self.id)
    }

    fn get_first_name(&self) -> String {
        self.first_name.to_owned()
    }

    fn get_lastname(&self) -> String {
        self.last_name.to_owned()
    }

    fn get_email(&self) -> String {
        self.email.to_owned()
    }
}
